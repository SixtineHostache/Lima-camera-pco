#include "pco_err.h"
#include "SC2_SDKStructures.h"
#include "SC2_SDKAddendum.h"
#include "SC2_CamExport.h"
#include "SC2_Defs.h"

#ifdef _FILEFUNCTION_
	char filename[50];
	#include "../file12.h"
	#include "../file12.cpp"
#endif

void print_transferpar(HANDLE cam);
#define BUFNUM 4

int main(int argc, char* argv[])
{
	int iRet;
	HANDLE cam;
	HANDLE BufEvent[BUFNUM];
	short BufNum[BUFNUM];
	WORD *BufAdr[BUFNUM];
	PCO_Description strDescription;
	WORD RecordingState;
	DWORD waitstat;
	printf("Get Handle to connected camera\n");
	iRet = PCO_OpenCamera(&cam, 0);
	if (iRet != PCO_NOERROR)
	{
		printf("No camera found\n");
		printf("Press <Enter> to end\n");
		iRet = getchar();
		return -1;
	}
	strDescription.wSize=sizeof(PCO_Description);
	iRet = PCO_GetCameraDescription(cam,&strDescription);
	iRet = PCO_GetRecordingState(cam, &RecordingState);
	if(RecordingState)
	{
		iRet = PCO_SetRecordingState(cam, 0);
	}
	//set camera to default state
	iRet = PCO_ResetSettingsToDefault(cam);
	#ifdef _FILEFUNCTION_
	iRet = PCO_SetTimestampMode(cam,TIMESTAMP_MODE_BINARYANDASCII);
	#endif

	iRet = PCO_ArmCamera(cam);

	DWORD CameraWarning, CameraError, CameraStatus;
	iRet = PCO_GetCameraHealthStatus(cam, &CameraWarning, &CameraError, &CameraStatus);
	if(CameraError!=0)
	{
		printf("Camera has ErrorStatus\n");
		printf("Press <Enter> to end\n");
		iRet = getchar();
		iRet = PCO_CloseCamera(cam);
		return -1;
	}
	print_transferpar(cam);

	WORD XResAct, YResAct, XResMax, YResMax;
	DWORD bufsize,StatusDLL,StatusDrv;
	iRet = PCO_GetSizes(cam, &XResAct, &YResAct, &XResMax, &YResMax);
	bufsize=XResAct*YResAct*sizeof(WORD);
	for(int b=0;b<BUFNUM;b++)
	{
		BufEvent[b] = NULL;
		BufNum[b] = -1;
		BufAdr[b]=NULL;
	}
	for(int b=0;b<BUFNUM;b++)
	{
		iRet = PCO_AllocateBuffer(cam, &BufNum[b], bufsize, &BufAdr[b], &BufEvent[b]);
	}
	iRet = PCO_SetImageParameters(cam, XResAct, YResAct,IMAGEPARAMETERS_READ_WHILE_RECORDING,NULL,0);
	printf("Start camera\n");
	iRet = PCO_SetRecordingState(cam, 1);

	for(int b=0;b<BUFNUM;b++)
	{
		iRet = PCO_AddBufferEx(cam,0,0, BufNum[b], XResAct, YResAct, 16);
	}
	int test,next,multi;
	test=next=multi=0;
	printf("Grab images from running camera\n");
	
	for(int i=1;i<=10;i++)
	{
		multi=0;
		printf("%02d. image wait ",i);
		waitstat=WaitForMultipleObjects(BUFNUM,BufEvent,FALSE,1000);
		if(waitstat==WAIT_TIMEOUT)
		{
			printf("failed\n");
			break;
		}
		// WaitForMultipleObjects might return with 2 or more events set,
		// so all buffers must be checked
		// 'test' and 'next' help to start check at last successful buffer
		// 'multi' counts the number of buffers, which have their event set
		test=next;
		for(int b=0;b<BUFNUM;b++)
		{
			waitstat=WaitForSingleObject(BufEvent[test],0);
			if(waitstat==WAIT_OBJECT_0)
			{
				multi++;
				ResetEvent(BufEvent[test]);
				iRet = PCO_GetBufferStatus(cam,BufNum[test],&StatusDLL,&StatusDrv);
				//!!! IMPORTANT StatusDrv must always be checked for errors
				if(StatusDrv==PCO_NOERROR)
				{
					printf(" done buf%02d status 0x%08x ",test,StatusDrv);
					if(multi>1)
					printf("multi %02d ",multi);
				}
				else
				{
					printf("buf%02d error status 0x%08x m %02d ",test,StatusDrv,multi);
					break;
				}

				// calculations on the image data can be done here, but calculation time must not exceed
				// frametime of camera else images are lost
				
				#ifdef _FILEFUNCTION_
				sprintf(filename,"add_image_%02d.tif",i);
				store_tiff(filename, XResAct, YResAct, 0, BufAdr[test]);
				printf("and stored to %s",filename);
				#endif

				iRet = PCO_AddBufferEx(cam,0,0, BufNum[test], XResAct, YResAct, 16);
		}
	else
	break;

	test++;
	if(test>=BUFNUM)
	test=0;
	printf("\n");
	}
	next=test;
	fflush(stdout);
	}//end for imacount



	//!!! IMPORTANT PCO_CancelImages must always be called, after PCO_AddBuffer...() loops
	iRet = PCO_CancelImages(cam);
	printf("Stop camera and close connection\n");
	iRet = PCO_SetRecordingState(cam, 0);
	for(int b=0;b<BUFNUM;b++)
	iRet = PCO_FreeBuffer(cam, BufNum[b]);
	iRet = PCO_CloseCamera(cam);
	printf("Press <Enter> to end\n");
	iRet = getchar();
	return 0;
	}
	void print_transferpar(HANDLE cam)
	{
	PCO_CameraType strCamType;
	DWORD iRet;
	strCamType.wSize=sizeof(PCO_CameraType);
	iRet = PCO_GetCameraType(cam,&strCamType);
	if(iRet!=PCO_NOERROR)
	{
	printf("PCO_GetCameraType failed with errorcode 0x%x\n",iRet);
	return;
	}
	if(strCamType.wInterfaceType==INTERFACE_CAMERA LINK)
	{
	PCO_SC2_CL_TRANSFER_PARAM cl_par;
	iRet = PCO_GetTransferParameter(cam,(void*)&cl_par,sizeof(PCO_SC2_CL_TRANSFER_PARAM));
	printf("Camlink Settings:\nBaudrate: %u\nClockfreq: %u\n",cl_par.baudrate,cl_par.ClockFrequency);
	printf("Dataformat: %u 0x%x\nTransmit: %u\n",cl_par.DataFormat,cl_par.DataFormat,cl_par.Transmit);
	}
}





































//===================================================================================================================
//===================================================================================================================
int BufferCtrlObj::_xferImag()
{

#ifndef __linux__
	DEB_MEMBER_FUNCT();
	DEF_FNID;

	DWORD dwFrameIdx;
	DWORD dwFrameFirst2assign, dwFrameLast2assign;
	DWORD dwEvent;
	//long long nr =0;
	//long long bytesWritten = 0;
	int bufIdx;
	int error;
	int lima_buffer_nb;
	bool live_mode;
	int _nrStop;
	char msg[RING_LOG_BUFFER_SIZE+1];
    const char *pmsg = msg;
	m_cam->m_tmpLog->flush(-1);
	int maxWaitTimeout ; m_cam->getAcqTimeoutRetry(maxWaitTimeout);

	bool checkImgNr = false;
	int imgNrDiff = 0;
	int alignmentShift = 0;
	int iLimaFrame;
	m_cam->_checkImgNrInit(checkImgNr, imgNrDiff, alignmentShift);

	DEB_ALWAYS() << m_cam->_sprintComment(false, fnId, "[WaitForMultipleObjects]", "[ENTRY]");
	
// --------------- get the requested nr of images 
	int requested_nb_frames;
	DWORD dwFramesPerBuffer, dwRequestedFrames;
	DWORD dwRequestedFramesMax =DWORD_MAX;
	int iRequestedFramesMax = INT_DWORD_MAX;
	
	int forcedFifo = 0;
	m_cam->getRecorderForcedFifo(forcedFifo);

// --------------- live video -> nr frames = 0 / idx lima buffers 32b (0...ffff)
	m_sync->getNbFrames(requested_nb_frames);
	
	if( (requested_nb_frames > 0) && (forcedFifo == 0))
	{
		dwRequestedFrames = (DWORD) requested_nb_frames;
		live_mode =false;
	} 
	else 
	{
		if((requested_nb_frames == 0) || (requested_nb_frames > iRequestedFramesMax))
			dwRequestedFrames = dwRequestedFramesMax;
		else 
			dwRequestedFrames = (DWORD) requested_nb_frames;

		live_mode = true;
	}
		
	dwRequestedFrames = (requested_nb_frames > 0) ? (DWORD) requested_nb_frames : dwRequestedFramesMax;
	dwFramesPerBuffer = m_cam->pcoGetFramesPerBuffer(); // for dimax = 1

	DEB_TRACE() << "\n" 
//		<< ">>> " << fnId << " (WaitForMultipleObjects) [ ENTRY]:\n" 
//		<< "    " << DEB_VAR2(_iPcoAllocatedBuffNr, _dwPcoAllocatedBuffSize) << "\n"  
//		<< "    " << DEB_VAR2(_wArmWidth, _wArmHeight) << "\n" 
//		<< "    " << DEB_VAR1(roiNow) << "\n" 
//		<< "    " << DEB_VAR4(_wRoiWidth, _wRoiHeight, _uiBytesPerPixel, _wBitPerPixel) << "\n" 
//		<< "    " << DEB_VAR2( dwFramesPerBuffer, dwFrameSize) << "\n"
		<< "    " << DEB_VAR3( requested_nb_frames, dwRequestedFrames, live_mode)
		;

//----------------- traceAcq init

	m_pcoData->traceAcq.fnIdXfer = fnId;
	m_pcoData->traceAcq.msImgCoc = (m_cam->pcoGetCocRunTime() * 1000.);

	TIME_USEC tStart;
	msElapsedTimeSet(tStart);
	m_pcoData->traceAcq.nrImgRequested = dwRequestedFrames;

#if 0
	if(!m_cam->_isRunAfterAssign()) 
	{
		DEB_TRACE() << "========================= recordingState 1 - BEFORE ASSIGN";
		m_cam->_pco_SetRecordingState(1, error);
	}
#endif

	// cleaning the buffers
	for(int _id = 0; _id <m_cam->m_pco_buffer_nrevents; _id++) {
		m_allocBuff.bufferReady[_id]= 0;
		m_allocBuff.bufferAssignedFrameFirst[_id] = -1;
		m_allocBuff.limaAllocBufferPtr[_id] = NULL;
		m_allocBuff.limaAllocBufferPtr1[_id] = NULL;
		m_allocBuff.dwLimaAllocBufferSize[_id] = 0;
	}



// --------------- prepare the first buffer 
// ------- in PCO DIMAX only 1 image can be retreived
//         (dwFramesPerBuffer = 1) ====> (dwFrameLast2assign = dwFrameFirst2assign)
	dwFrameFirst2assign = 1;
	dwFrameLast2assign = dwFrameFirst2assign + dwFramesPerBuffer - 1;
	if(dwFrameLast2assign > dwRequestedFrames) dwFrameLast2assign = dwRequestedFrames;

	for(int i = 0; i <m_cam->m_pco_buffer_nrevents; i++) {
						// --------------- if needed prepare the next buffer 
		if(dwFrameFirst2assign > dwRequestedFrames) break;
			bufIdx = i;
			
			bool recording = m_cam->_getCameraState(CAMSTATE_RECORD_STATE);
			bool runAfterAssign = m_cam->_isRunAfterAssign();

			if((!runAfterAssign) || (!recording && runAfterAssign))
			{

				if(m_cam->_getDebug(DBG_WAITOBJ))
				{
					char msg[512];
					__sprintfSExt(msg, sizeof(msg), "... ASSIGN BUFFER[%d] frame[%d] recordState[%d] live[%d]", bufIdx, dwFrameFirst2assign, recording, live_mode);
					m_cam->m_tmpLog->add(msg);  DEB_ALWAYS() << msg;
				}


				if( (error = _assignImage2Buffer(
				    dwFrameFirst2assign, dwFrameLast2assign, dwRequestedFrames, bufIdx,live_mode))
				    ) 
				{
					DEB_TRACE() << "ERROR _assignImage2Buffer";
						return pcoAcqPcoError;
				}

				if(m_cam->_getDebug(DBG_WAITOBJ))
				{

					SHORT sBufNr = 	m_allocBuff.pcoAllocBufferNr[bufIdx];
					DWORD dwStatusDll, dwStatusDrv;
					int errPco;

					m_cam->_pco_GetBufferStatus(sBufNr, &dwStatusDll, &dwStatusDrv,errPco);
					char msg[128];
					__sprintfSExt(msg,sizeof(msg),"buffNr[%d] dwStatusDll[%08lx] dwStatusDrv[%08lx] err[%x]", sBufNr, dwStatusDll, dwStatusDrv, errPco);
					DEB_ALWAYS() << "... PCO_GetBufferStatus: " << msg;

				}



			}
			else
			{
				DEB_ALWAYS() << "ERROR _assignImage2Buffer with wrong recordState / IGNORED!!!!" << DEB_VAR2(recording, runAfterAssign);
			}


	}

	WORD wArmWidth, wArmHeight;
	unsigned int bytesPerPixel;

	WORD _wMaxWidth, _wMaxHeight;
	m_cam->_pco_GetSizes(&wArmWidth, &wArmHeight, &_wMaxWidth, &_wMaxHeight, error);
	m_cam->getBytesPerPixel(bytesPerPixel);
	//DWORD dwLen = wArmWidth * wArmHeight * bytesPerPixel;

	// Edge cam must be started just after assign buff to avoid lost of img
	if(m_cam->_isRunAfterAssign()) 
	{
		DWORD sleepMs = 1;
		::Sleep(sleepMs);
		DEB_TRACE() << "========================= recordingState 1 - AFTER ASSIGN (_xferImag)";
		if(m_cam->_getDebug(DBG_WAITOBJ))
		{
			pmsg = "... EDGE - recordingState 1" ; m_cam->m_tmpLog->add(pmsg); DEB_TRACE() << pmsg;
		}
		m_cam->_pco_SetRecordingState(1, error);
	}


	// --------------- loop - process the N frames


	dwFrameIdx = 1;
	if(m_cam->_getDebug(DBG_WAITOBJ)){
		DEB_ALWAYS() << "... FRAME IDX before while: " << DEB_VAR2(dwFrameIdx, dwRequestedFrames);
	}
	while(dwFrameIdx <= dwRequestedFrames) {
		
		if(m_cam->_getDebug(DBG_WAITOBJ)){
			DEB_ALWAYS() << "FRAME IDX inside while: " << DEB_VAR2(dwFrameIdx, dwRequestedFrames);
		}

_RETRY:

	if((m_sync->_getRequestStop(_nrStop) == stopRequest) && (_nrStop > MAX_NR_STOP)) {goto _EXIT_STOP;}

	// --------------- look if one of buffer is READY and has the NEXT frame => proccess it
    // m_allocatedBufferAssignedFrameFirst[bufIdx] -> first frame in the buffer (we are using only 1 frame per buffer)
    // m_allocatedBufferReady[bufIdx] -> is already filled by sdk (ready)

	{
		int iPending;
	PCO_GetPendingBuffer(m_cam->m_handle, &iPending);

	if(m_cam->_getDebug(DBG_WAITOBJ))
					{
						DEB_ALWAYS() << "... PCO_GetPendingBuffer: " << DEB_VAR1(iPending);
					}
	}

    for(bufIdx = 0; bufIdx <m_cam->m_pco_buffer_nrevents; bufIdx++) 
	{

			SHORT sBufNr = 	m_allocBuff.pcoAllocBufferNr[bufIdx];
			DWORD dwStatusDll, dwStatusDrv;
			int errPco;
			DWORD dwBuffFrame = m_allocBuff.bufferAssignedFrameFirst[bufIdx];

		m_cam->_pco_GetBufferStatus(sBufNr, &dwStatusDll, &dwStatusDrv,errPco);


			if(m_cam->_getDebug(DBG_WAITOBJ))
			{
				char msg[256];
				__sprintfSExt(msg,sizeof(msg),"buffNr[%d] dwBuffFrame[%d] dwFrameIdx[%d] dwStatusDll[%08lx] dwStatusDrv[%08lx] err[%x]", 
					sBufNr, dwBuffFrame, dwFrameIdx, dwStatusDll, dwStatusDrv, errPco);
				DEB_ALWAYS() << "... PCO_GetBufferStatus: " << msg;
            }


//		if((m_allocBuff.bufferAssignedFrameFirst[bufIdx] == dwFrameIdx) && m_allocBuff.bufferReady[bufIdx]) 
		if(( dwBuffFrame == dwFrameIdx) && (dwStatusDll == 0x80008000)) 
		{

			//m_cam->_pco_GetBufferStatus(sBufNr, &dwStatusDll, &dwStatusDrv,errPco);


			//if((dwStatusDll != 0x80008000)) break;

			// lima frame nr is from 0 .... N-1, PCO nr is from 1 ... N        
			lima_buffer_nb = dwFrameIdx -1; // this frame was already readout to the buffer
          
			if(m_cam->_getDebug(DBG_WAITOBJ))
			{
				char msg[512];
				__sprintfSExt(msg, sizeof(msg), "... PROCESS PCObuff[%d] TO LIMAbuff[%d] frame[%d]", bufIdx, lima_buffer_nb, dwFrameIdx);
				DEB_ALWAYS() << msg;
			}
			m_pcoData->traceAcq.nrImgAcquired = dwFrameIdx;

#ifdef USING_PCO_ALLOCATED_BUFFERS
			// we are using the PCO allocated buffer, so this buffer must be copied to the lima buffer
			void * ptrDest = (void *)m_allocBuff.limaAllocBufferPtr[bufIdx];
			void *ptrSrc = (void *) m_allocBuff.pcoAllocBufferPtr[bufIdx];
			size_t sizeLima = m_allocBuff.dwLimaAllocBufferSize[bufIdx];
			size_t size = m_allocBuff.dwPcoAllocBufferSize[bufIdx];

			size = sizeLima;
			if((m_sync->_getRequestStop(_nrStop) == stopRequest) && (_nrStop > MAX_NR_STOP)) {goto _EXIT_STOP;}



			m_cam->_pco_GetBufferStatus(sBufNr, &dwStatusDll, &dwStatusDrv,errPco);


            if(m_cam->_getDebug(DBG_WAITOBJ))
			{
				char msg[128];
				__sprintfSExt(msg,sizeof(msg),"buffNr[%d] dwStatusDll[%08lx] dwStatusDrv[%08lx] err[%x]", sBufNr, dwStatusDll, dwStatusDrv, errPco);
				DEB_ALWAYS() << "... PCO_GetBufferStatus: " << msg;
            }

//			if((dwStatusDll != 0x80000000) || dwStatusDrv || errPco) {
			if(0) {
				char msg[MSG1K];
				__sprintfSExt(msg,MSG1K,"SDK ERROR got frame[%d / %d] bufIdx[%d] size[%ld] dest[%p] src[%p] \n"
					"dwStatusDll[%08x] dwStatusDrv[%08x] errPco[%08x] err[%s]\n", 
					dwFrameIdx, dwRequestedFrames, bufIdx,
					size, ptrDest, ptrSrc,
					dwStatusDll, dwStatusDrv, errPco,
					m_cam->_PcoCheckError(__LINE__, __FILE__, dwStatusDrv, error));
				DEB_ALWAYS() << msg;
			}

			if(m_cam->_getDebug(DBG_DUMMY_IMG))
			{
				// creating a dummy image
				int val = dwFrameIdx & 0xf;
				memset(ptrDest, val, size);
				DEB_ALWAYS() << "===== dummy image!!! " << DEB_VAR1(val);
			} 
			else 
			{
				// copy the real imaga ptrSrc -> ptrDest
				memcpy(ptrDest, ptrSrc, size);
			}		
#else
			ERROR USING_PCO_ALLOCATED_BUFFERS
#endif


			//----- the image dwFrameIdx is already in the buffer -> callback newFrameReady
			//----- lima frame (0 ... N-1) PCO frame (1 ... N)
			HwFrameInfoType frame_info;
			iLimaFrame = frame_info.acq_frame_nb = lima_buffer_nb;
			m_buffer_cb_mgr.newFrameReady(frame_info);


				//=============================== check PCO ImgNr with the limaFrame
				if(checkImgNr) 
				{
					int imgNr, diff;
					imgNr = _get_imageNr_from_imageTimestamp(ptrSrc, alignmentShift);
					diff = imgNr - iLimaFrame;
					m_pcoData->traceAcq.checkImgNrLima = iLimaFrame +1;
					m_pcoData->traceAcq.checkImgNrPco = imgNr;
					if(diff != imgNrDiff) 
					{
						//DEB_ALWAYS() << DEB_VAR3(iLimaFrame, imgNr, diff);
						imgNrDiff = diff;
					}
				}

			//----- the image dwFrameIdx is already in the buffer -> callback!
			if((m_sync->_getRequestStop(_nrStop) == stopRequest) && (_nrStop > MAX_NR_STOP)) {goto _EXIT_STOP;}
			
			if(0) 
//			if(!(dwFrameFirst2assign <= dwRequestedFrames)) 
			{
				char msg[128];
				//ResetEvent(m_allocBuff.bufferAllocEvent[bufIdx]);
				__sprintfSExt(msg, sizeof(msg), "... RESETING BUFFER BUFFER[%d] frame[%d] live[%d]", bufIdx, dwFrameFirst2assign, live_mode);
				DEB_ALWAYS() << msg;
			}
			else
			{
				if( (m_cam->_getCameraState(CAMSTATE_RECORD_STATE) && m_cam->_isRunAfterAssign()) || (!m_cam->_isRunAfterAssign()) )
				{
					if(m_cam->_getDebug(DBG_WAITOBJ))
					{
						__sprintfSExt(msg, sizeof(msg), "... ASSIGN BUFFER[%d] frame[%d] live[%d]", bufIdx, dwFrameFirst2assign, live_mode);
						m_cam->m_tmpLog->add(msg);  DEB_ALWAYS() << msg;
					}
					
					if( (error = _assignImage2Buffer(
						dwFrameFirst2assign, dwFrameLast2assign, dwRequestedFrames, bufIdx, live_mode) )
						) 
					{
						return pcoAcqPcoError;
					}

					if(m_cam->_getDebug(DBG_WAITOBJ))
					{
						SHORT sBufNr = 	m_allocBuff.pcoAllocBufferNr[bufIdx];
						DWORD dwStatusDll, dwStatusDrv;
						int errPco;

						m_cam->_pco_GetBufferStatus(sBufNr, &dwStatusDll, &dwStatusDrv,errPco);
						char msg[128];
						__sprintfSExt(msg,sizeof(msg),"buffNr[%d] dwStatusDll[%08lx] dwStatusDrv[%08lx] err[%x]", sBufNr, dwStatusDll, dwStatusDrv, errPco);
						DEB_ALWAYS() << "... PCO_GetBufferStatus: " << msg;
					}

				}
				else
				{
					DEB_ALWAYS() << "ERROR _assignImage2Buffer with recordState = 0 / IGNORED!!!!";
				}
			} // if(dwFrameFirst2assign <= dwRequestedFrames) 

			goto _WHILE_CONTINUE;
		}// if((m_allocBuff.bufferAssignedFrameFirst[bufIdx] == dwFrameIdx)
    } // for(bufIdx = 0; bufIdx <m_cam->m_pco_buffer_nrevents; bufIdx++)

_RETRY_WAIT:

		if((m_sync->_getRequestStop(_nrStop) == stopRequest) && (_nrStop > MAX_NR_STOP)) {goto _EXIT_STOP;}

// --------------- check if there is some buffer ready
		if(m_cam->_getDebug(DBG_WAITOBJ)){
			pmsg = "... WaitForMultipleObjects - waiting" ; m_cam->m_tmpLog->add(pmsg); DEB_ALWAYS() << pmsg;
		}
		dwEvent = WaitForMultipleObjects( 
			m_cam->m_pco_buffer_nrevents,           // number of objects in array
			m_allocBuff.bufferAllocEvent,     // array of objects
			FALSE,       // wait for any object
			EVENT_WAIT_TMOUT_MS);       // ms wait

    // The return value indicates which event is signaled

	int iPending;
	PCO_GetPendingBuffer(m_cam->m_handle, &iPending);

					if(m_cam->_getDebug(DBG_WAITOBJ))
					{
						DEB_ALWAYS() << "... PCO_GetPendingBuffer: " << DEB_VAR1(iPending);
					}



#if PCO_BUFFER_NREVENTS != 4
  #pragma message ("============================================== ABORT - wrong nr of WAIT_OBJECT ")
    DUMMY_FOR_ABORT = 5;
#endif

    switch (dwEvent) { 
        case WAIT_OBJECT_0 + 0: 
			m_allocBuff.bufferReady[0] = 1; 
            if(m_cam->_getDebug(DBG_WAITOBJ))
			{
                    pmsg = "... WAITOBJ 0 found" ; m_cam->m_tmpLog->add(pmsg); DEB_ALWAYS() << pmsg;
            }
			goto _RETRY;

		case WAIT_OBJECT_0 + 1: 
			m_allocBuff.bufferReady[1] = 1; 
            if(m_cam->_getDebug(DBG_WAITOBJ)){
                    pmsg = "... WAITOBJ 1 found" ; m_cam->m_tmpLog->add(pmsg); DEB_ALWAYS() << pmsg;
            }
			goto _RETRY;

        case WAIT_OBJECT_0 + 2: 
			m_allocBuff.bufferReady[2] = 1;
            if(m_cam->_getDebug(DBG_WAITOBJ)){
                    pmsg = "... WAITOBJ 2 found" ; m_cam->m_tmpLog->add(pmsg); DEB_ALWAYS() << pmsg;
            }
			goto _RETRY;

        case WAIT_OBJECT_0 + 3: 
			m_allocBuff.bufferReady[3] = 1; 
            if(m_cam->_getDebug(DBG_WAITOBJ)){
                    pmsg = "... WAITOBJ 3 found" ; m_cam->m_tmpLog->add(pmsg); DEB_ALWAYS() << pmsg;
            }
			goto _RETRY;

        case WAIT_TIMEOUT: 
			{
				maxWaitTimeout--; 
				if(m_cam->_getDebug(DBG_WAITOBJ)){m_cam->m_tmpLog->dumpPrint(true);}
				
				char errstr[MSG4K+1];
				char *ptr = errstr;
				char *ptrMax = errstr + MSG4K;
				const char* flag;
				for(int _id = 0; _id<m_cam->m_pco_buffer_nrevents; _id++)
				{
					flag = m_allocBuff.bufferAssignedFrameFirst[_id] == dwFrameIdx ? "***" : "   ";
					ptr += __sprintfSExt(ptr, ptrMax - ptr, 
						"\n%s [%d] pcoBuffNr[%d] ready[%d] limaFrame[%d] limaPtr[%p] pcoPtr[%p] limaSize[%d] pcoSize[%d]",
						flag, _id,
						m_allocBuff.pcoAllocBufferNr[_id],
						m_allocBuff.bufferReady[_id],
						m_allocBuff.bufferAssignedFrameFirst[_id],
						(void *) m_allocBuff.limaAllocBufferPtr[_id],
						(void *) m_allocBuff.pcoAllocBufferPtr[_id],
						m_allocBuff.dwLimaAllocBufferSize[_id],
						m_allocBuff.dwPcoAllocBufferSize[_id]);
				}

				if(maxWaitTimeout)
				{
					DEB_ALWAYS() << "\nWAITOBJ ERROR - TIMEOUT - RETRY " << DEB_VAR2(maxWaitTimeout, dwFrameIdx) << errstr;
					goto _RETRY_WAIT; // retry when >0 (counting down up to 0) / <0 infinite
				
				} 
				else
				{
					DEB_ALWAYS() << "\nWAITOBJ ERROR - TIMEOUT - ABORT " << DEB_VAR2(maxWaitTimeout, dwFrameIdx) << errstr;
					return pcoAcqWaitTimeout;
				}
			}
        
		
		default: 
			printf("=== %s> WAITOBJ default ????\n", fnId);
			return pcoAcqWaitError;
    }

_WHILE_CONTINUE:
	m_sync->setAcqFrames(dwFrameIdx);
    dwFrameIdx++;
  } // while(frameIdx ...

  // if(m_cam->_isCameraType(Edge)) {m_sync->setAcqFrames(dwFrameIdx-1);}

  if(m_cam->_getDebug(DBG_WAITOBJ)){m_cam->m_tmpLog->dumpPrint(true);}  // true first .... last
	
	m_pcoData->traceAcq.msXfer = msElapsedTime(tStart);
	m_pcoData->traceAcq.endXferTimestamp = getTimestamp();

	DEB_ALWAYS() << m_cam->_sprintComment(false, fnId, "[EXIT]");

	return pcoAcqTransferEnd;

_EXIT_STOP:
	DEB_ALWAYS()	<< m_cam->_sprintComment(false, fnId, "[STOP REQUESTED]", "[EXIT]");
	DEB_TRACE()		<< DEB_VAR3(_nrStop, dwFrameIdx, dwRequestedFrames);

	m_pcoData->traceAcq.msXfer = msElapsedTime(tStart);
	m_pcoData->traceAcq.endXferTimestamp = getTimestamp();

	return pcoAcqTransferStop;
#else
	return -1;
#endif


}
